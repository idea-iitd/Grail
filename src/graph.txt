"""Generating node mappings between 2 labelled graphs such that edit distance is minimal"""
import itertools
import numpy as np
import networkx as nx
import copy
import math
import heapq
import random

def convert_to_adjmatrix(edge_list1, edge_list2) -> list[list[int]]: #_unequal
  max_node = (
      max(max(edge_list1[0]), max(edge_list1[1]),max(edge_list2[0]),max(edge_list2[1])) + 1
  )  # Find the maximum node index
  adjacency_matrix1 = [[0] * max_node for _ in range(max_node)]
  adjacency_matrix2 = [[0] * max_node for _ in range(max_node)]

  for edge in zip(edge_list1[0], edge_list1[1]):
    source, destination = edge
    adjacency_matrix1[source][destination] = 1
  
  for edge in zip(edge_list2[0], edge_list2[1]):
    source, destination = edge
    adjacency_matrix2[source][destination] = 1

  ged=2*max_node -2 - max(max(edge_list1[0]), max(edge_list1[1])) - max(max(edge_list2[0]), max(edge_list2[1]))
  return adjacency_matrix1, adjacency_matrix2, ged 

def assign_labels_based_on_features(nftrs1,nftrs2):
    labels = {}  # Dictionary to store unique feature-to-label mapping
    node_labels1 = []  # Dictionary to store node index to label mapping
    node_labels2 = []
    current_label_index = 0  # Tracks the next label to assign

    # Alphabet list for labeling
    alphabet = [chr(ord('a') + i) for i in range(26)]  # 'a', 'b', ..., 'z'
    
    # If more than 26 labels are needed, extend the alphabet (aa, ab, etc.)
    z=len(nftrs1)+len(nftrs2)
    while len(alphabet) < z :
        alphabet += [a + b for a in alphabet for b in alphabet][:z - len(alphabet)]
    

    for i, features in enumerate(nftrs1):
        features_tuple = tuple(features)  # Convert features to a tuple to make it hashable
        if features_tuple==(-1,):
           node_labels1.append("eps")
        else:
        # Check if features already have an assigned label
          if features_tuple in labels:
            node_labels1.append(labels[features_tuple])  # Assign existing label
          else:
              # Assign a new label
              labels[features_tuple] = alphabet[current_label_index]
              node_labels1.append(alphabet[current_label_index])
              current_label_index += 1

    for i, features in enumerate(nftrs2):
        features_tuple = tuple(features)  # Convert features to a tuple to make it hashable
        
        if features_tuple==(-1,):
           node_labels2.append("eps")
        # Check if features already have an assigned label
        else:
           if features_tuple in labels:
            node_labels2.append(labels[features_tuple])  # Assign existing label
           else:
            labels[features_tuple] = alphabet[current_label_index]
            node_labels2.append(alphabet[current_label_index])
            current_label_index += 1   

    return node_labels1, node_labels2

def solve(
    graph1: list[list[int]], 
    graph2: list[list[int]],
    labels1, labels2,
    weights: list[list[float]]
) -> dict:
    """Builds a mapping between 2 labelled graphs using Neighbor Bias Mapper and label similarity.
    
    Args:
        graph1: adjacency matrix of graph 1
        graph2: adjacency matrix of graph 2
        weights: A weight matrix representing the likelihood of mapping nodes between `graph1` and `graph2`.
    
    Returns:
        nodemappings: A dictionary mapping nodes of graph1 to graph2.
    """
    def label_similarity(u, v):
        return 1 if labels1[u] == labels2[v] else 0
    n1, n2 = len(graph1), len(graph2)

    
    # Initial priority weights adjusted with label similarity
    W = priority(graph1, graph2, weights)
    
    # Priority queue to store potential matches with highest priority first
    PQ = []
    mate = [-1] * n1  # stores best match in graph2 for each node in graph1
    wt = [-math.inf] * n1  # stores the best weight for each node in graph1

    # Initialize PQ with best initial matches
    for u in range(n1):
        v_m = max(range(n2), key=lambda v: W[u][v])  # best match for u in graph2
        heapq.heappush(PQ, (-W[u][v_m], u, v_m))  # store negative weight for max-heap behavior
        mate[u] = v_m
        wt[u] = W[u][v_m]

    matched = set()
    nodemappings = {}

    # Function to get neighbors up to 1 hop away
    def get_1hop_neighbors(u, graph):
        return [i for i in range(len(graph[u])) if graph[u][i] > 0]

    # Function to get neighbors up to 2 hops away
    def get_2hop_neighbors(u, graph):
        neighbors = set()
        for neighbor in range(len(graph[u])):
            if graph[u][neighbor] > 0:
                neighbors.add(neighbor)
                for second_neighbor in range(len(graph[neighbor])):
                    if graph[neighbor][second_neighbor] > 0:
                        neighbors.add(second_neighbor)
        return neighbors

    # Process the priority queue
    while PQ:
        _, u, v = heapq.heappop(PQ)
        if u in nodemappings:
            continue
        if v in matched:
            v_m = max((w for w in range(n2) if w not in matched), key=lambda x: W[u][x], default=None)
            if v_m is not None:
                heapq.heappush(PQ, (-W[u][v_m], u, v_m))
                mate[u] = v_m
                wt[u] = W[u][v_m]
            continue

        # Mark (u, v) as matched
        nodemappings[u] = v
        matched.add(v)

        # Update weights based on 1-hop neighbors
        neighbors_u = get_1hop_neighbors(u, graph1)
        neighbors_v = get_1hop_neighbors(v, graph2)
        
        for u_prime in neighbors_u:
            if u_prime in nodemappings:
                continue
            for v_prime in neighbors_v:
                if v_prime in matched:
                    continue
                # Update weight for u_prime and v_prime based on label similarity and 1-hop neighbors
                W[u_prime][v_prime] += W[u][v] + label_similarity(u_prime, v_prime)
                if W[u_prime][v_prime] > wt[u_prime]:
                    mate[u_prime] = v_prime
                    wt[u_prime] = W[u_prime][v_prime]
                    heapq.heappush(PQ, (-W[u_prime][v_prime], u_prime, v_prime))

    # Second pass: further refine weights using 2-hop neighbors
    PQ = []
    for u in range(n1):
        v_m = max(range(n2), key=lambda v: W[u][v])  # best match for u in graph2 after 1-hop update
        heapq.heappush(PQ, (-W[u][v_m], u, v_m))
        mate[u] = v_m
        wt[u] = W[u][v_m]

    # Process the priority queue again for 2-hop neighbors
    while PQ:
        _, u, v = heapq.heappop(PQ)
        if u in nodemappings:
            continue
        if v in matched:
            v_m = max((w for w in range(n2) if w not in matched), key=lambda x: W[u][x], default=None)
            if v_m is not None:
                heapq.heappush(PQ, (-W[u][v_m], u, v_m))
                mate[u] = v_m
                wt[u] = W[u][v_m]
            continue

        # Mark (u, v) as matched
        nodemappings[u] = v
        matched.add(v)

        # Update weights based on 2-hop neighbors
        neighbors_u = get_2hop_neighbors(u, graph1)
        neighbors_v = get_2hop_neighbors(v, graph2)
        
        for u_prime in neighbors_u:
            if u_prime in nodemappings:
                continue
            for v_prime in neighbors_v:
                if v_prime in matched:
                    continue
                # Update weight for u_prime and v_prime based on 2-hop neighbors
                W[u_prime][v_prime] += W[u][v] + label_similarity(u_prime, v_prime)
                if W[u_prime][v_prime] > wt[u_prime]:
                    mate[u_prime] = v_prime
                    wt[u_prime] = W[u_prime][v_prime]
                    heapq.heappush(PQ, (-W[u_prime][v_prime], u_prime, v_prime))

    return nodemappings    

@funsearch.run 
def evaluate(desc : tuple[list[list[int]], list[list[int]], list[list[float]], list[list[float]]]):
  """Returns the graph edit distance based on the node mappings"""
  g1,g2,nf1,nf2 = desc
  g1, g2,ged = convert_to_adjmatrix(g1,g2)
  # print("here")
  x = len(g1[0])
  y1 = len(nf1)  # y is the number of nodes with features
  y2 = len(nf2)

  nf1 = nf1 + [[-1]] * (x - y1)
  nf2 = nf2 + [[-1]] * (x - y2)

  labels1, labels2 = assign_labels_based_on_features(nf1,nf2) 
  max_node = max(len(g1), len(g2))
  weights = [[0] * max_node for _ in range(max_node)]
  for i in range(max_node):
        for j in range(max_node):
            # Handle dummy nodes (explicitly excluded from labels)
            if i >= len(labels1) or j >= len(labels2) or labels1[i] == "eps" or labels2[j] == "eps":
                weights[i][j] = 0
            elif labels1[i] == labels2[j]:
                weights[i][j] = 1
            elif labels1[i] != labels2[j]:
                weights[i][j] = 0

  nodemap = solve(copy.deepcopy(g1),copy.deepcopy(g2), copy.deepcopy(labels1), copy.deepcopy(labels2), weights)  
  cost = 0
  y=0
  
  for v1 in range(len(g1)):
     mapped_v1 = nodemap[v1]
     print(v1,mapped_v1)
     if labels1[v1]!="eps" and labels2[mapped_v1]!="eps" and labels1[v1]!=labels2[mapped_v1]:
        y+=1

  # print("y: ",y)
  for v1 in range(len(g1)):
      for v2 in range(len(g1[0])):
          mapped_v1 = nodemap.get(v1, -1)
          mapped_v2 = nodemap.get(v2, -1)
          if g1[v1][v2] == 1:
              if mapped_v1 != -1 and mapped_v2 != -1 and g2[mapped_v1][mapped_v2] != 1:
                  cost += 1

          elif g1[v1][v2] == 0:

              if mapped_v1 != -1 and mapped_v2 != -1 and g2[mapped_v1][mapped_v2] != 0:
                  cost += 1

  
  cost = cost/2+ged+y
  return -cost

@funsearch.evolve
def priority(graph1: list[list[int]], graph2: list[list[int]], weights: list[list[int]]) -> list[list[float]]:
  """
    Computes the Graph Edit Distance (GED), a measure of the dissimilarity between two graphs. 
    GED is defined as the minimum number of operations required to transform one graph into another.
    The primary operations considered in GED calculations include:

    - **Node Insertion/Deletion:** Adding or removing a node incurs a cost of +1.
    - **Edge Insertion/Deletion:** Adding or removing an edge between two nodes incurs a cost of +1.
    - **Node Relabeling:** Modifying the label of a node (if labels are present) adds a cost of +1 for each mismatch.

    Args:
        graph1: The adjacency matrix of the first graph.
        graph2: The adjacency matrix of the second graph.
        weights: A weight matrix representing the initial probabilities of mapping nodes between `graph1` and `graph2`.
                 Each entry is a probability value, where a higher value indicates a higher likelihood and similarity 
                 of mapping nodes. The size of the weight matrix is determined by the maximum number of nodes in both graphs squared.

    Returns:
        A refined weight matrix (float) using the initial input matrix and the adjacency matrices of graphs where each entry represents the probability of a node in `graph1` 
        being mapped to a node in `graph2` in a way that minimizes the overall graph edit distance.
  """
  max_node = len(graph1)
  weights = [[0.0] * max_node for _ in range(max_node)]
  return weights
